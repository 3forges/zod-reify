{
  "name": "jest tests",
  "tests": 17,
  "failures": 0,
  "errors": 0,
  "time": 26.181,
  "testsuite": [
    {
      "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method",
      "errors": 0,
      "failures": 0,
      "skipped": 0,
      "timestamp": "2024-09-21T18:38:46",
      "time": 26.072,
      "tests": 17,
      "testcase": [
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.807
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.479
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.338
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.193
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.903
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.787
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.229
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.241
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 0.944
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.075
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.285
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.553
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object which successfully pass the zod parse test",
          "time": 1.462
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown which successfully pass the zod parse test [{\"expectedFrontmatter\": [Array], \"name\": \"Test #3: markdown frontmatter extraction zodSchema3\", \"testMarkdown\": \"---\n\n- voila: oh que oui\n- voila: ça marche vraiment!\n---\n\n# Hello Pesto ZodSchemaReifier!\n\", \"zodMatterShouldThrow\": false, \"zodSchema\": [ZodNullable], \"zodSchemaAsText\": \"z\n  .object({\n    voila: z.string(),\n  })\n  .array()\n  .optional()\n  .nullable()\"}]",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown which successfully pass the zod parse test [{\"expectedFrontmatter\": [Array], \"name\": \"Test #3: markdown frontmatter extraction zodSchema3\", \"testMarkdown\": \"---\n\n- voila: oh que oui\n- voila: ça marche vraiment!\n---\n\n# Hello Pesto ZodSchemaReifier!\n\", \"zodMatterShouldThrow\": false, \"zodSchema\": [ZodNullable], \"zodSchemaAsText\": \"z\n  .object({\n    voila: z.string(),\n  })\n  .array()\n  .optional()\n  .nullable()\"}]",
          "time": 1.171
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown which successfully pass the zod parse test [{\"expectedFrontmatter\": [Object], \"name\": \"Test #4: markdown frontmatter extraction zodSchema4\", \"testMarkdown\": \"---\n\ntitle: HiDeoo\n\nhereAnother: \n\n  reseau: \n\n    cesar: \n\n      - marc\n\n      - aurèle\n\n      - auguste\n\n  imLackingIdea: true\n\n  itsForATest: false\n\ntags: \n\n  - william\n\n  - the\n\n  - conquerer\n\nanother: true\n\nexampleCategory:\n\n  - - joe\n\n    - alfred\n\n    - alvin\n\n  - - thirteen\n\n    - hundred\n\n    - books\n\n  - - going\n\n    - overseas\n\n    - together\n\nexample2Category: \n\n  - false\n\n  - true\n\n  - false\n\nexample3Category: \n\n  - 7684464125145\n\n  - 26454943684684\n\n  - 1516546884648\n\nexample4Category: \n\n  - 7684464125145\n\n  - 26454943684684\n\n  - 1516546884648\n\nimage: \\\"./images/paysages/puydedome.png\\\"\n\nsomethingElseNested:\n\n  firstname: \n\n    - Jean-Baptiste\n\n    - Marie\n\n    - Éric\n\n  lastname: Lasselle\n\n  color: yellow\n\n  two: false\n\n  three: \n\n    - 56\n\n    - 789\n\n    - 159\n\n  four: \n\n    - 15\n\n    - 46\n\n    - 739\n\n  example1Categories: \n\n    - design\n\n    - terraform\n\n    - plugin\n\n  example2Categories: \n\n    first:\n\n      - joe\n\n      - alfred\n\n      - alvin\n\n    second:\n\n      - thirteen\n\n      - hundred\n\n      - books\n\n    third:\n\n      - going\n\n      - overseas\n\n      - together\n\ndepartment: \n\n  divisionName: CCOE\n\n  secrecyTags: \n    - LEVEL3\n \n    - NOCOPY\n\n---\n\n# Hello Pesto ZodSchemaReifier!\n\", \"zodMatterShouldThrow\": false, \"zodSchema\": [ZodOptional], \"zodSchemaAsText\": \"z\n  .object({\n    title: z.string(),\n    hereAnother: z.object({\n      reseau: z.object({\n        cesar: z.array(z.string()),\n      }),\n      imLackingIdea: z.boolean().optional(),\n      itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n      firstname: z.string().array(),\n      lastname: z.string(),\n      color: z.string(),\n      two: z.boolean().optional(),\n      three: z.number().array().optional(),\n      four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n      divisionName: z.string(),\n      secrecyTags: z.array(z.string()).optional(),\n    }),\n  })\n  .optional()\"}]",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown which successfully pass the zod parse test [{\"expectedFrontmatter\": [Object], \"name\": \"Test #4: markdown frontmatter extraction zodSchema4\", \"testMarkdown\": \"---\n\ntitle: HiDeoo\n\nhereAnother: \n\n  reseau: \n\n    cesar: \n\n      - marc\n\n      - aurèle\n\n      - auguste\n\n  imLackingIdea: true\n\n  itsForATest: false\n\ntags: \n\n  - william\n\n  - the\n\n  - conquerer\n\nanother: true\n\nexampleCategory:\n\n  - - joe\n\n    - alfred\n\n    - alvin\n\n  - - thirteen\n\n    - hundred\n\n    - books\n\n  - - going\n\n    - overseas\n\n    - together\n\nexample2Category: \n\n  - false\n\n  - true\n\n  - false\n\nexample3Category: \n\n  - 7684464125145\n\n  - 26454943684684\n\n  - 1516546884648\n\nexample4Category: \n\n  - 7684464125145\n\n  - 26454943684684\n\n  - 1516546884648\n\nimage: \\\"./images/paysages/puydedome.png\\\"\n\nsomethingElseNested:\n\n  firstname: \n\n    - Jean-Baptiste\n\n    - Marie\n\n    - Éric\n\n  lastname: Lasselle\n\n  color: yellow\n\n  two: false\n\n  three: \n\n    - 56\n\n    - 789\n\n    - 159\n\n  four: \n\n    - 15\n\n    - 46\n\n    - 739\n\n  example1Categories: \n\n    - design\n\n    - terraform\n\n    - plugin\n\n  example2Categories: \n\n    first:\n\n      - joe\n\n      - alfred\n\n      - alvin\n\n    second:\n\n      - thirteen\n\n      - hundred\n\n      - books\n\n    third:\n\n      - going\n\n      - overseas\n\n      - together\n\ndepartment: \n\n  divisionName: CCOE\n\n  secrecyTags: \n    - LEVEL3\n \n    - NOCOPY\n\n---\n\n# Hello Pesto ZodSchemaReifier!\n\", \"zodMatterShouldThrow\": false, \"zodSchema\": [ZodOptional], \"zodSchemaAsText\": \"z\n  .object({\n    title: z.string(),\n    hereAnother: z.object({\n      reseau: z.object({\n        cesar: z.array(z.string()),\n      }),\n      imLackingIdea: z.boolean().optional(),\n      itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n      firstname: z.string().array(),\n      lastname: z.string(),\n      color: z.string(),\n      two: z.boolean().optional(),\n      three: z.number().array().optional(),\n      four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n      divisionName: z.string(),\n      secrecyTags: z.array(z.string()).optional(),\n    }),\n  })\n  .optional()\"}]",
          "time": 1.858
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown which successfully pass the zod parse test [{\"expectedFrontmatter\": [Object], \"name\": \"Test #5: markdown frontmatter extraction zodSchema5\", \"testMarkdown\": \"---\n\ntitle: HiDeoo\n\nhereAnother:\n\n  reseau:\n\n    cesar:\n\n      - marc\n\n      - aurèle\n\n      - auguste\n\n  imLackingIdea: true\n\n  itsForATest: false\n\ntags: \n\n  - william\n\n  - the\n\n  - conquerer\n\nanother: true\n\nexampleCategory:\n\n  - - joe\n\n    - alfred\n\n    - alvin\n\n  - - thirteen\n\n    - hundred\n\n    - books\n\n  - - going\n\n    - overseas\n\n    - together\n\nexample2Category: \n\n  - false\n\n  - true\n\n  - false\n\nexample3Category: \n\n  - 7684464125145\n\n  - 26454943684684\n\n  - 1516546884648\n\nexample4Category: \n\n  - 7684464125145\n\n  - 26454943684684\n\n  - 1516546884648\n\nimage: \\\"./images/paysages/puydedome.png\\\"\n\nsomethingElseNested:\n\n  firstname: \n\n    - Jean-Baptiste\n\n    - Marie\n\n    - Éric\n\n  lastname: Lasselle\n\n  color: yellow\n\n  two: false\n\n  three: \n\n    - 56\n\n    - 789\n\n    - 159\n\n  four: \n\n    - 15\n\n    - 46\n\n    - 739\n\n  example1Categories: \n\n    - design\n\n    - terraform\n\n    - plugin\n\n  example2Categories: \n\n    first:\n\n      - joe\n\n      - alfred\n\n      - alvin\n\n    second:\n\n      - thirteen\n\n      - hundred\n\n      - books\n\n    third:\n\n      - going\n\n      - overseas\n\n      - together\n\ndepartment: \n\n  divisionName: CCOE\n\n  secrecyTags: \n    - LEVEL3\n \n    - NOCOPY\n\n---\n\n# Hello Pesto ZodSchemaReifier!\n\", \"zodMatterShouldThrow\": false, \"zodSchema\": [ZodObject], \"zodSchemaAsText\": \"z\n  .object({\n    title: z.string(),\n    hereAnother: z.object({\n      reseau: z.object({\n        cesar: z.array(z.string()),\n      }),\n      imLackingIdea: z.boolean().optional(),\n      itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n      firstname: z.string().array(),\n      lastname: z.string(),\n      color: z.string(),\n      two: z.boolean().optional(),\n      three: z.number().array().optional(),\n      four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n      divisionName: z.string(),\n      secrecyTags: z.array(z.string()).optional(),\n    }),\n  })\"}]",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown which successfully pass the zod parse test [{\"expectedFrontmatter\": [Object], \"name\": \"Test #5: markdown frontmatter extraction zodSchema5\", \"testMarkdown\": \"---\n\ntitle: HiDeoo\n\nhereAnother:\n\n  reseau:\n\n    cesar:\n\n      - marc\n\n      - aurèle\n\n      - auguste\n\n  imLackingIdea: true\n\n  itsForATest: false\n\ntags: \n\n  - william\n\n  - the\n\n  - conquerer\n\nanother: true\n\nexampleCategory:\n\n  - - joe\n\n    - alfred\n\n    - alvin\n\n  - - thirteen\n\n    - hundred\n\n    - books\n\n  - - going\n\n    - overseas\n\n    - together\n\nexample2Category: \n\n  - false\n\n  - true\n\n  - false\n\nexample3Category: \n\n  - 7684464125145\n\n  - 26454943684684\n\n  - 1516546884648\n\nexample4Category: \n\n  - 7684464125145\n\n  - 26454943684684\n\n  - 1516546884648\n\nimage: \\\"./images/paysages/puydedome.png\\\"\n\nsomethingElseNested:\n\n  firstname: \n\n    - Jean-Baptiste\n\n    - Marie\n\n    - Éric\n\n  lastname: Lasselle\n\n  color: yellow\n\n  two: false\n\n  three: \n\n    - 56\n\n    - 789\n\n    - 159\n\n  four: \n\n    - 15\n\n    - 46\n\n    - 739\n\n  example1Categories: \n\n    - design\n\n    - terraform\n\n    - plugin\n\n  example2Categories: \n\n    first:\n\n      - joe\n\n      - alfred\n\n      - alvin\n\n    second:\n\n      - thirteen\n\n      - hundred\n\n      - books\n\n    third:\n\n      - going\n\n      - overseas\n\n      - together\n\ndepartment: \n\n  divisionName: CCOE\n\n  secrecyTags: \n    - LEVEL3\n \n    - NOCOPY\n\n---\n\n# Hello Pesto ZodSchemaReifier!\n\", \"zodMatterShouldThrow\": false, \"zodSchema\": [ZodObject], \"zodSchemaAsText\": \"z\n  .object({\n    title: z.string(),\n    hereAnother: z.object({\n      reseau: z.object({\n        cesar: z.array(z.string()),\n      }),\n      imLackingIdea: z.boolean().optional(),\n      itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n      firstname: z.string().array(),\n      lastname: z.string(),\n      color: z.string(),\n      two: z.boolean().optional(),\n      three: z.number().array().optional(),\n      four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n      divisionName: z.string(),\n      secrecyTags: z.array(z.string()).optional(),\n    }),\n  })\"}]",
          "time": 1.733
        },
        {
          "classname": "Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{\"expectedFrontmatter\": [Array], \"name\": \"Test #6: markdown frontmatter extraction zodSchema6\", \"testMarkdown\": undefined, \"zodMatterShouldThrow\": true, \"zodSchema\": [ZodTuple], \"zodSchemaAsText\": \"z.tuple([\n      z.object({first: z.array(z.string())}),\n      z.object({second: z.array(z.string())}),\n      z.object({third: z.array(z.string())}),\n    ])\"}] should throw an error because zod matter parse does not accept zod tuples as input schema",
          "name": "Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{\"expectedFrontmatter\": [Array], \"name\": \"Test #6: markdown frontmatter extraction zodSchema6\", \"testMarkdown\": undefined, \"zodMatterShouldThrow\": true, \"zodSchema\": [ZodTuple], \"zodSchemaAsText\": \"z.tuple([\n      z.object({first: z.array(z.string())}),\n      z.object({second: z.array(z.string())}),\n      z.object({third: z.array(z.string())}),\n    ])\"}] should throw an error because zod matter parse does not accept zod tuples as input schema",
          "time": 1.18
        }
      ]
    }
  ]
}
