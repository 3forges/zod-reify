
> @pesto-io/zod-reify@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> TEST CASE 1 [decorators]

      at Object.<anonymous> (tests/reify/LetSee.test.ts:79:17)

  console.log
    created : 26/9/2024, 21:13:03

      at Object.<anonymous> (tests/reify/LetSee.test.ts:82:17)

  console.log
    lucky is : 3

      at Object.<anonymous> (tests/reify/LetSee.test.ts:83:17)

  console.log
    reify().lastname is : universe

      at Object.<anonymous> (tests/reify/LetSee.test.ts:84:17)

  console.log
    name is : undefined

      at Object.<anonymous> (tests/reify/LetSee.test.ts:86:17)

PASS tests/reify/LetSee.test.ts
  Tests of the {@ZodSchemaReifier} reify() method against the zod parse method
    TypeScript Decorators Test 1
      √ successfully get n display the lucky number, and the created properties (75 ms)

  console.log
     >>>>>>> TEST CASE [Test #1: zodSchema1] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        voila: z.string(),
    })
        .optional()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        voila: z.string(),
    })
        .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    voila: z.string(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        voila: z.string(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #1bis: zodSchema1] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        voila: z.string(),
    })
        .optional()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        voila: z.string(),
    })
        .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    voila: z.string(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        voila: z.string(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "object",
            "received": "null",
            "path": [],
            "message": "Expected object, received null"
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #2: zodSchema2] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()\n    .optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    voila: z.string(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        voila: z.string(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "vraiment super bien!"
        }
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #3: zodSchema3] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()
        .nullable()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()
        .nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()
        .nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()
        .nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()\n    .optional()\n    .nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()\n    .optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()\n    .optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    voila: z.string(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        voila: z.string(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "super bien!"
        }
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #4: zodSchema4] - testCase.zodSchemaAsText=[z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })
        .optional()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })
        .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[231]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    title: z.string(),\n    hereAnother: z.object({\n        reseau: z.object({\n            cesar: z.array(z.string()),\n        }),\n        imLackingIdea: z.boolean().optional(),\n        itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n        firstname: z.string().array(),\n        lastname: z.string(),\n        color: z.string(),\n        two: z.boolean().optional(),\n        three: z.number().array().optional(),\n        four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n        divisionName: z.string(),\n        secrecyTags: z.array(z.string()).optional(),\n    }),\n})\n    .optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    title: z.string(),\n    hereAnother: z.object({\n        reseau: z.object({\n            cesar: z.array(z.string()),\n        }),\n        imLackingIdea: z.boolean().optional(),\n        itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n        firstname: z.string().array(),\n        lastname: z.string(),\n        color: z.string(),\n        two: z.boolean().optional(),\n        three: z.number().array().optional(),\n        four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n        divisionName: z.string(),\n        secrecyTags: z.array(z.string()).optional(),\n    }),\n})",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    title: z.string(),\n    hereAnother: z.object({\n        reseau: z.object({\n            cesar: z.array(z.string()),\n        }),\n        imLackingIdea: z.boolean().optional(),\n        itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n        firstname: z.string().array(),\n        lastname: z.string(),\n        color: z.string(),\n        two: z.boolean().optional(),\n        three: z.number().array().optional(),\n        four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n        divisionName: z.string(),\n        secrecyTags: z.array(z.string()).optional(),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({\n    reseau: z.object({\n        cesar: z.array(z.string()),\n    }),\n    imLackingIdea: z.boolean().optional(),\n    itsForATest: z.boolean(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              reseau: z.object({
                cesar: z.array(z.string()),
              }),
              imLackingIdea: z.boolean().optional(),
              itsForATest: z.boolean(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.reify(z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    reseau: z.object({\n        cesar: z.array(z.string()),\n    }),\n    imLackingIdea: z.boolean().optional(),\n    itsForATest: z.boolean(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({\n    cesar: z.array(z.string()),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                cesar: z.array(z.string()),
              })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.reify(z.object({
        cesar: z.array(z.string()),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    cesar: z.array(z.string()),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        cesar: z.array(z.string()),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.reify(z.boolean().nullish())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1622:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.reify(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.reify(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1299:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.reify(z.optional(z.number()).array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1334:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.reify(z.string().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({\n    firstname: z.string().array(),\n    lastname: z.string(),\n    color: z.string(),\n    two: z.boolean().optional(),\n    three: z.number().array().optional(),\n    four: z.array(z.number()).optional(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              firstname: z.string().array(),
              lastname: z.string(),
              color: z.string(),
              two: z.boolean().optional(),
              three: z.number().array().optional(),
              four: z.array(z.number()).optional(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.reify(z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    firstname: z.string().array(),\n    lastname: z.string(),\n    color: z.string(),\n    two: z.boolean().optional(),\n    three: z.number().array().optional(),\n    four: z.array(z.number()).optional(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.reify(z.string().array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.reify(z.number().array().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({\n    divisionName: z.string(),\n    secrecyTags: z.array(z.string()).optional(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              divisionName: z.string(),
              secrecyTags: z.array(z.string()).optional(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.reify(z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    divisionName: z.string(),\n    secrecyTags: z.array(z.string()).optional(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.reify(z.array(z.string()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": {
        "title": "HiDeoo",
        "hereAnother": {
          "reseau": {
            "cesar": [
              "marc",
              "aurèle",
              "auguste"
            ]
          },
          "imLackingIdea": true,
          "itsForATest": false
        },
        "tags": [
          "william",
          "the",
          "conquerer"
        ],
        "another": true,
        "exampleCategory": [
          [
            "joe",
            "alfred",
            "alvin"
          ],
          [
            "thirteen",
            "hundred",
            "books"
          ],
          [
            "going",
            "overseas",
            "together"
          ]
        ],
        "example2Category": [
          false,
          true,
          false
        ],
        "example3Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "example4Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "image": "./images/paysages/puydedome.png",
        "somethingElseNested": {
          "firstname": [
            "Jean-Baptiste",
            "Marie",
            "Éric"
          ],
          "lastname": "Lasselle",
          "color": "yellow",
          "two": false,
          "three": [
            56,
            789,
            159
          ],
          "four": [
            15,
            46,
            739
          ]
        },
        "department": {
          "divisionName": "CCOE",
          "secrecyTags": [
            "LEVEL3",
            "NOCOPY"
          ]
        }
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #5: zodSchema5] - testCase.zodSchemaAsText=[z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    title: z.string(),\n    hereAnother: z.object({\n        reseau: z.object({\n            cesar: z.array(z.string()),\n        }),\n        imLackingIdea: z.boolean().optional(),\n        itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n        firstname: z.string().array(),\n        lastname: z.string(),\n        color: z.string(),\n        two: z.boolean().optional(),\n        three: z.number().array().optional(),\n        four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n        divisionName: z.string(),\n        secrecyTags: z.array(z.string()).optional(),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({\n    reseau: z.object({\n        cesar: z.array(z.string()),\n    }),\n    imLackingIdea: z.boolean().optional(),\n    itsForATest: z.boolean(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              reseau: z.object({
                cesar: z.array(z.string()),
              }),
              imLackingIdea: z.boolean().optional(),
              itsForATest: z.boolean(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.reify(z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    reseau: z.object({\n        cesar: z.array(z.string()),\n    }),\n    imLackingIdea: z.boolean().optional(),\n    itsForATest: z.boolean(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({\n    cesar: z.array(z.string()),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                cesar: z.array(z.string()),
              })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.reify(z.object({
        cesar: z.array(z.string()),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    cesar: z.array(z.string()),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        cesar: z.array(z.string()),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.reify(z.boolean().nullish())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1622:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.reify(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.reify(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1299:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.reify(z.optional(z.number()).array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1334:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.reify(z.string().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({\n    firstname: z.string().array(),\n    lastname: z.string(),\n    color: z.string(),\n    two: z.boolean().optional(),\n    three: z.number().array().optional(),\n    four: z.array(z.number()).optional(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              firstname: z.string().array(),
              lastname: z.string(),
              color: z.string(),
              two: z.boolean().optional(),
              three: z.number().array().optional(),
              four: z.array(z.number()).optional(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.reify(z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    firstname: z.string().array(),\n    lastname: z.string(),\n    color: z.string(),\n    two: z.boolean().optional(),\n    three: z.number().array().optional(),\n    four: z.array(z.number()).optional(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.reify(z.string().array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.reify(z.number().array().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({\n    divisionName: z.string(),\n    secrecyTags: z.array(z.string()).optional(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              divisionName: z.string(),
              secrecyTags: z.array(z.string()).optional(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.reify(z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    divisionName: z.string(),\n    secrecyTags: z.array(z.string()).optional(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.reify(z.array(z.string()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": {
        "title": "HiDeoo",
        "hereAnother": {
          "reseau": {
            "cesar": [
              "marc",
              "aurèle",
              "auguste"
            ]
          },
          "imLackingIdea": true,
          "itsForATest": false
        },
        "tags": [
          "william",
          "the",
          "conquerer"
        ],
        "another": true,
        "exampleCategory": [
          [
            "joe",
            "alfred",
            "alvin"
          ],
          [
            "thirteen",
            "hundred",
            "books"
          ],
          [
            "going",
            "overseas",
            "together"
          ]
        ],
        "example2Category": [
          false,
          true,
          false
        ],
        "example3Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "example4Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "image": "./images/paysages/puydedome.png",
        "somethingElseNested": {
          "firstname": [
            "Jean-Baptiste",
            "Marie",
            "Éric"
          ],
          "lastname": "Lasselle",
          "color": "yellow",
          "two": false,
          "three": [
            56,
            789,
            159
          ],
          "four": [
            15,
            46,
            739
          ]
        },
        "department": {
          "divisionName": "CCOE",
          "secrecyTags": [
            "LEVEL3",
            "NOCOPY"
          ]
        }
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #6: zodSchema6] - testCase.zodSchemaAsText=[z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[\n    z.object({ first: z.array(z.string()) }),\n    z.object({ second: z.array(z.string()) }),\n    z.object({ third: z.array(z.string()) }),\n]"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[tuple]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ArrayLiteralExpression] - processedNode is [[
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ first: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ second: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ third: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1320:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #7: zodSchema7] - testCase.zodSchemaAsText=[z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]).nullable().optional()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]).nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]).nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]).nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([\n    z.object({ first: z.array(z.string()) }),\n    z.object({ second: z.array(z.string()) }),\n    z.object({ third: z.array(z.string()) }),\n]).nullable().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([\n    z.object({ first: z.array(z.string()) }),\n    z.object({ second: z.array(z.string()) }),\n    z.object({ third: z.array(z.string()) }),\n]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([\n    z.object({ first: z.array(z.string()) }),\n    z.object({ second: z.array(z.string()) }),\n    z.object({ third: z.array(z.string()) }),\n]).nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([\n    z.object({ first: z.array(z.string()) }),\n    z.object({ second: z.array(z.string()) }),\n    z.object({ third: z.array(z.string()) }),\n])",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[\n    z.object({ first: z.array(z.string()) }),\n    z.object({ second: z.array(z.string()) }),\n    z.object({ third: z.array(z.string()) }),\n]"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[tuple]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ArrayLiteralExpression] - processedNode is [[
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ first: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ second: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ third: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1320:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #8: zodSchema8] - testCase.zodSchemaAsText=[z.boolean().nullable().optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.boolean().nullable().optional()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.boolean().nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean().nullable()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": false
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #9: zodSchema9] - testCase.zodSchemaAsText=[z.array(z.boolean().nullish()).nullable().optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.array(z.boolean().nullish()).nullable().optional()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish()).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish())",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.boolean().nullish())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean().nullish())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1622:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        true,
        false,
        true
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #10: zodSchema10] - testCase.zodSchemaAsText=[z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[61]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[58]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[strict]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})",
        "strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [un: z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "un",
        "z.object({\n    deux: z.object({\n        trois: z.object({\n            quatre: z.object({\n                cinq: z.object({\n                    six: z.object({\n                        sept: z.string(),\n                    }),\n                }),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [un]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              deux: z.object({
                trois: z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                }),
              }),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[un] = this.reify(z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[45]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    deux: z.object({\n        trois: z.object({\n            quatre: z.object({\n                cinq: z.object({\n                    six: z.object({\n                        sept: z.string(),\n                    }),\n                }),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [deux: z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "deux",
        "z.object({\n    trois: z.object({\n        quatre: z.object({\n            cinq: z.object({\n                six: z.object({\n                    sept: z.string(),\n                }),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [deux]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                trois: z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                }),
              })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[deux] = this.reify(z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[38]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    trois: z.object({\n        quatre: z.object({\n            cinq: z.object({\n                six: z.object({\n                    sept: z.string(),\n                }),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [trois: z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "trois",
        "z.object({\n    quatre: z.object({\n        cinq: z.object({\n            six: z.object({\n                sept: z.string(),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [trois]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[trois] = this.reify(z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[31]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    quatre: z.object({\n        cinq: z.object({\n            six: z.object({\n                sept: z.string(),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [quatre: z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "quatre",
        "z.object({\n    cinq: z.object({\n        six: z.object({\n            sept: z.string(),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [quatre]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[quatre] = this.reify(z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[24]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    cinq: z.object({\n        six: z.object({\n            sept: z.string(),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cinq: z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cinq",
        "z.object({\n    six: z.object({\n        sept: z.string(),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cinq]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cinq] = this.reify(z.object({
        six: z.object({
            sept: z.string(),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    six: z.object({\n        sept: z.string(),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        six: z.object({
            sept: z.string(),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [six: z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "six",
        "z.object({\n    sept: z.string(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [six]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                        sept: z.string(),
                      })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[six] = this.reify(z.object({
        sept: z.string(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    sept: z.string(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        sept: z.string(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [sept: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "sept",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [sept]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[sept] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [strict]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1671:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": {
        "un": {
          "deux": {
            "trois": {
              "quatre": {
                "cinq": {
                  "six": {
                    "sept": "Excellent!"
                  }
                }
              }
            }
          }
        }
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #10bis: zodSchema10] - testCase.zodSchemaAsText=[z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[61]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[58]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[strict]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})",
        "strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [un: z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "un",
        "z.object({\n    deux: z.object({\n        trois: z.object({\n            quatre: z.object({\n                cinq: z.object({\n                    six: z.object({\n                        sept: z.string(),\n                    }),\n                }),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [un]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              deux: z.object({
                trois: z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                }),
              }),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[un] = this.reify(z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[45]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    deux: z.object({\n        trois: z.object({\n            quatre: z.object({\n                cinq: z.object({\n                    six: z.object({\n                        sept: z.string(),\n                    }),\n                }),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [deux: z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "deux",
        "z.object({\n    trois: z.object({\n        quatre: z.object({\n            cinq: z.object({\n                six: z.object({\n                    sept: z.string(),\n                }),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [deux]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                trois: z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                }),
              })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[deux] = this.reify(z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[38]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    trois: z.object({\n        quatre: z.object({\n            cinq: z.object({\n                six: z.object({\n                    sept: z.string(),\n                }),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [trois: z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "trois",
        "z.object({\n    quatre: z.object({\n        cinq: z.object({\n            six: z.object({\n                sept: z.string(),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [trois]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[trois] = this.reify(z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[31]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    quatre: z.object({\n        cinq: z.object({\n            six: z.object({\n                sept: z.string(),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [quatre: z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "quatre",
        "z.object({\n    cinq: z.object({\n        six: z.object({\n            sept: z.string(),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [quatre]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[quatre] = this.reify(z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[24]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    cinq: z.object({\n        six: z.object({\n            sept: z.string(),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cinq: z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cinq",
        "z.object({\n    six: z.object({\n        sept: z.string(),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cinq]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cinq] = this.reify(z.object({
        six: z.object({
            sept: z.string(),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    six: z.object({\n        sept: z.string(),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        six: z.object({
            sept: z.string(),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [six: z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "six",
        "z.object({\n    sept: z.string(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [six]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                        sept: z.string(),
                      })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[six] = this.reify(z.object({
        sept: z.string(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    sept: z.string(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        sept: z.string(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [sept: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "sept",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [sept]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[sept] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [strict]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1671:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": null
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #10ter: zodSchema10] - testCase.zodSchemaAsText=[z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[61]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[58]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })
        .strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})\n    .strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[strict]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n})",
        "strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    un: z.object({\n        deux: z.object({\n            trois: z.object({\n                quatre: z.object({\n                    cinq: z.object({\n                        six: z.object({\n                            sept: z.string(),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    })\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        un: z.object({
            deux: z.object({
                trois: z.object({
                    quatre: z.object({
                        cinq: z.object({
                            six: z.object({
                                sept: z.string(),
                            }),
                        }),
                    }),
                }),
            }),
        })
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [un: z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "un",
        "z.object({\n    deux: z.object({\n        trois: z.object({\n            quatre: z.object({\n                cinq: z.object({\n                    six: z.object({\n                        sept: z.string(),\n                    }),\n                }),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [un]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              deux: z.object({
                trois: z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                }),
              }),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[un] = this.reify(z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[45]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    deux: z.object({\n        trois: z.object({\n            quatre: z.object({\n                cinq: z.object({\n                    six: z.object({\n                        sept: z.string(),\n                    }),\n                }),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        deux: z.object({
            trois: z.object({
                quatre: z.object({
                    cinq: z.object({
                        six: z.object({
                            sept: z.string(),
                        }),
                    }),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [deux: z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "deux",
        "z.object({\n    trois: z.object({\n        quatre: z.object({\n            cinq: z.object({\n                six: z.object({\n                    sept: z.string(),\n                }),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [deux]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                trois: z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                }),
              })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[deux] = this.reify(z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[38]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    trois: z.object({\n        quatre: z.object({\n            cinq: z.object({\n                six: z.object({\n                    sept: z.string(),\n                }),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        trois: z.object({
            quatre: z.object({
                cinq: z.object({
                    six: z.object({
                        sept: z.string(),
                    }),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [trois: z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "trois",
        "z.object({\n    quatre: z.object({\n        cinq: z.object({\n            six: z.object({\n                sept: z.string(),\n            }),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [trois]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                  quatre: z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  }),
                })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[trois] = this.reify(z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[31]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    quatre: z.object({\n        cinq: z.object({\n            six: z.object({\n                sept: z.string(),\n            }),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        quatre: z.object({
            cinq: z.object({
                six: z.object({
                    sept: z.string(),
                }),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [quatre: z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "quatre",
        "z.object({\n    cinq: z.object({\n        six: z.object({\n            sept: z.string(),\n        }),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [quatre]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                    cinq: z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    }),
                  })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[quatre] = this.reify(z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[24]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    cinq: z.object({\n        six: z.object({\n            sept: z.string(),\n        }),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        cinq: z.object({
            six: z.object({
                sept: z.string(),
            }),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cinq: z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cinq",
        "z.object({\n    six: z.object({\n        sept: z.string(),\n    }),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cinq]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                      six: z.object({
                        sept: z.string(),
                      }),
                    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cinq] = this.reify(z.object({
        six: z.object({
            sept: z.string(),
        }),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        six: z.object({
            sept: z.string(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    six: z.object({\n        sept: z.string(),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        six: z.object({
            sept: z.string(),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [six: z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "six",
        "z.object({\n    sept: z.string(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [six]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                        sept: z.string(),
                      })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[six] = this.reify(z.object({
        sept: z.string(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        sept: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    sept: z.string(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        sept: z.string(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [sept: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "sept",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [sept]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[sept] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [strict]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1671:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #11: zodSchema11, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1552:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #11bis: zodSchema11, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1552:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #11ter: zodSchema11, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1552:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123456Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #11quarte: zodSchema11, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime()]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1552:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_string",
            "validation": "datetime",
            "message": "Invalid datetime",
            "path": []
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #12: zodSchema12, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ offset: true });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ offset: true });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ offset: true })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ offset: true })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ offset: true }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ offset: true }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [offset: true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "offset",
        "true"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [offset]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[offset] = this.reify(true)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [TrueKeyword] - processedNode is [true]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1236:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00+02:00"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #12bis: zodSchema12, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ offset: true });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ offset: true });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ offset: true })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ offset: true })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ offset: true }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ offset: true }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [offset: true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "offset",
        "true"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [offset]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[offset] = this.reify(true)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [TrueKeyword] - processedNode is [true]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1236:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123+02:00"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #12ter: zodSchema12, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ offset: true });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ offset: true });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ offset: true })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ offset: true })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ offset: true }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ offset: true }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [offset: true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "offset",
        "true"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [offset]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[offset] = this.reify(true)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [TrueKeyword] - processedNode is [true]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1236:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123+0200"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #12quarte: zodSchema12, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ offset: true });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ offset: true });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ offset: true })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ offset: true })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ offset: true }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ offset: true }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [offset: true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "offset",
        "true"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [offset]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[offset] = this.reify(true)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [TrueKeyword] - processedNode is [true]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1236:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123+02"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #13: zodSchema13, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ precision: 3 });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ precision: 3 });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ precision: 3 })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ precision: 3 })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ precision: 3 }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ precision: 3 }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [precision: 3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "precision",
        "3"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [precision]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[precision] = this.reify(3)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NumericLiteral] - processedNode is [3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1236:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #13bis: zodSchema13, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ precision: 3 });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ precision: 3 });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ precision: 3 })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ precision: 3 })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ precision: 3 }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ precision: 3 }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [precision: 3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "precision",
        "3"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [precision]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[precision] = this.reify(3)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NumericLiteral] - processedNode is [3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1236:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_string",
            "validation": "datetime",
            "message": "Invalid datetime",
            "path": []
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #13ter: zodSchema13, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ precision: 3 });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ precision: 3 });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ precision: 3 })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ precision: 3 })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ precision: 3 }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ precision: 3 }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [precision: 3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "precision",
        "3"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [precision]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[precision] = this.reify(3)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NumericLiteral] - processedNode is [3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1236:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_string",
            "validation": "datetime",
            "message": "Invalid datetime",
            "path": []
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #14: zodSchema14, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the "not" operator).] - testCase.zodSchemaAsText=[z.object({ 
        something: z.boolean(),
      });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.object({ 
        something: z.boolean(),
      });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({
        something: z.boolean(),
    })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({
        something: z.boolean(),
    })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        something: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        something: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    something: z.boolean(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        something: z.boolean(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [something: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "something",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [something]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[something] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": {
        "something": true
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #14bis: testCase14bis, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using both an unary, and a binary operator (the "not" operator, and the "or" operator).] - testCase.zodSchemaAsText=[z.object({ 
        something: z.boolean(),
      });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.object({ 
        something: z.boolean(),
      });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({
        something: z.boolean(),
    })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({
        something: z.boolean(),
    })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        something: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        something: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    something: z.boolean(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        something: z.boolean(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [something: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "something",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [something]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[something] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": {
        "something": true
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #15: zodSchema15, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the "not" operator).] - testCase.zodSchemaAsText=[z.date().min(new Date("1900-01-01"), { message: "Too old" });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.date().min(new Date("1900-01-01"), { message: "Too old" });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.date().min(new Date("1900-01-01"), { message: "Too old" })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.date().min(new Date("1900-01-01"), { message: "Too old" })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.date().min(new Date("1900-01-01"), { message: "Too old" })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.date().min(new Date("1900-01-01"), { message: "Too old" })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.date().min",
        "new Date(\"1900-01-01\")",
        "{ message: \"Too old\" }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[min]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:441:17)

  console.log
    [@ZodSchemaReifier].[reify()] - firstPassedArgument is :[[object Object]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:445:17)

  console.log
    [@ZodSchemaReifier].[reify()] - secondPassedArgument is :[[object Object]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:449:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.date()",
        "min"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:457:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:467:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.date"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[date]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "date"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [date]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1545:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NewExpression] - processedNode is [new Date("1900-01-01")]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected NewExpression node [KindName=NewExpression] is :[new Date("1900-01-01")]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:579:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of NewExpression - processedNode children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:588:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of NewExpression - processedNode childrenOfChildrensArray count is :[0]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:591:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of NewExpression - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "Date",
        "\"1900-01-01\""
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:601:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of NewExpression - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:610:15)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [StringLiteral] - processedNode is ["1900-01-01"]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyZodNewExpressionWithOneArg()] - Ok zod functionName is [Date]

      at ZodSchemaReifier.reifyZodNewExpressionWithOneArg (src/reify/ZodSchemaReifier.ts:672:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ message: "Too old" }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [message: "Too old"]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "message",
        "\"Too old\""
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [message]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = ["Too old"]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[message] = this.reify("Too old")

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [StringLiteral] - processedNode is ["Too old"]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
     >>>>>>> TEST CASE [Test #16: zodSchema16, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the "not" operator).] - testCase.zodSchemaAsText=[z.date().max(new Date(), { message: "Too young!" });]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.date().max(new Date(), { message: "Too young!" });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.date().max(new Date(), { message: "Too young!" })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.date().max(new Date(), { message: "Too young!" })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.date().max(new Date(), { message: "Too young!" })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.date().max(new Date(), { message: "Too young!" })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[12]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.date().max",
        "new Date()",
        "{ message: \"Too young!\" }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[max]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:441:17)

  console.log
    [@ZodSchemaReifier].[reify()] - firstPassedArgument is :[[object Object]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:445:17)

  console.log
    [@ZodSchemaReifier].[reify()] - secondPassedArgument is :[[object Object]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:449:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.date()",
        "max"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:457:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:467:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.date"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[date]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "date"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [date]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1545:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NewExpression] - processedNode is [new Date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected NewExpression node [KindName=NewExpression] is :[new Date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:579:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of NewExpression - processedNode children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:588:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of NewExpression - processedNode childrenOfChildrensArray count is :[0]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:591:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of NewExpression - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "Date"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:601:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of NewExpression - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:610:15)

  console.log
    [@ZodSchemaReifier].[reifyZodNewExpressionWithOneArg()] - Ok zod functionName is [Date]

      at ZodSchemaReifier.reifyZodNewExpressionWithOneArg (src/reify/ZodSchemaReifier.ts:672:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ message: "Too young!" }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [message: "Too young!"]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "message",
        "\"Too young!\""
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [message]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = ["Too young!"]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[message] = this.reify("Too young!")

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [StringLiteral] - processedNode is ["Too young!"]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
     >>>>>>> TEST CASE [Test #17: zodSchema17, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the "not" operator).] - testCase.zodSchemaAsText=[z.coerce.date();]

      at tests/reify/ZodSchemaReifier.test.ts:1695:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.coerce.date();

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.coerce.date()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.coerce.date()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.coerce.date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.coerce.date()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[5]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.coerce.date"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[date]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.coerce",
        "date"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.coerce]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [PropertyAccessExpression] - processedNode is [z.coerce]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected PropertyAccessExpression node [KindName=PropertyAccessExpression] is :[z.coerce]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:523:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of Property Access Expression - processedNode children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:532:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of Property Access Expression - processedNode childrenOfChildrensArray count is :[0]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:535:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of Property Access Expression - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z",
        "coerce"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:545:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of Property Access Expression - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:554:15)

  console.log
    [@ZodSchemaReifier].[reify()] - case of Property Access Expression - processedNode childrenArray[0].print() is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:564:17)

  console.log
    [@ZodSchemaReifier].[reify()] - case of Property Access Expression - processedNode childrenArray[1].print() is :[coerce]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:566:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [date]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1545:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1704:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1705:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2024-01-01T00:00:00.000Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1708:15

  console.log
     >>>>>>> TEST CASE [Test #3: markdown frontmatter extraction zodSchema3] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1746:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()
        .nullable()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()
        .nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()
        .nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()
        .nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()\n    .optional()\n    .nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()\n    .optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .array()
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()\n    .optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })
        .array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    voila: z.string(),\n})\n    .array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    voila: z.string(),\n})",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        voila: z.string(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    voila: z.string(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        voila: z.string(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1757:13

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1760:14

  console.log
     >>>>>>> testCase.testMarkdown is :[---
    
    - voila: oh que oui
    - voila: ça marche vraiment!
    ---
    
    # Hello Pesto ZodSchemaReifier!
    ]

      at tests/reify/ZodSchemaReifier.test.ts:1763:14

  console.log
     >>>>>>> testCase.expectedFrontmatter is :[[
      {
        "voila": "oh que oui"
      },
      {
        "voila": "ça marche vraiment!"
      }
    ]]

      at tests/reify/ZodSchemaReifier.test.ts:1766:14

  console.log
     >>>>>>> zod-matter extracted fronmatter is :[[
      {
        "voila": "oh que oui"
      },
      {
        "voila": "ça marche vraiment!"
      }
    ]]

      at tests/reify/ZodSchemaReifier.test.ts:1774:16

  console.log
     >>>>>>> expected frontmatter is :[[
      {
        "voila": "oh que oui"
      },
      {
        "voila": "ça marche vraiment!"
      }
    ]]

      at tests/reify/ZodSchemaReifier.test.ts:1777:16

  console.log
     >>>>>>> TEST CASE [Test #4: markdown frontmatter extraction zodSchema4] - testCase.zodSchemaAsText=[z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1746:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })
        .optional()]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })
        .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })
        .optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[231]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object({\n    title: z.string(),\n    hereAnother: z.object({\n        reseau: z.object({\n            cesar: z.array(z.string()),\n        }),\n        imLackingIdea: z.boolean().optional(),\n        itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n        firstname: z.string().array(),\n        lastname: z.string(),\n        color: z.string(),\n        two: z.boolean().optional(),\n        three: z.number().array().optional(),\n        four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n        divisionName: z.string(),\n        secrecyTags: z.array(z.string()).optional(),\n    }),\n})\n    .optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z\n    .object({\n    title: z.string(),\n    hereAnother: z.object({\n        reseau: z.object({\n            cesar: z.array(z.string()),\n        }),\n        imLackingIdea: z.boolean().optional(),\n        itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n        firstname: z.string().array(),\n        lastname: z.string(),\n        color: z.string(),\n        two: z.boolean().optional(),\n        three: z.number().array().optional(),\n        four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n        divisionName: z.string(),\n        secrecyTags: z.array(z.string()).optional(),\n    }),\n})",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    title: z.string(),\n    hereAnother: z.object({\n        reseau: z.object({\n            cesar: z.array(z.string()),\n        }),\n        imLackingIdea: z.boolean().optional(),\n        itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n        firstname: z.string().array(),\n        lastname: z.string(),\n        color: z.string(),\n        two: z.boolean().optional(),\n        three: z.number().array().optional(),\n        four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n        divisionName: z.string(),\n        secrecyTags: z.array(z.string()).optional(),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({\n    reseau: z.object({\n        cesar: z.array(z.string()),\n    }),\n    imLackingIdea: z.boolean().optional(),\n    itsForATest: z.boolean(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              reseau: z.object({
                cesar: z.array(z.string()),
              }),
              imLackingIdea: z.boolean().optional(),
              itsForATest: z.boolean(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.reify(z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    reseau: z.object({\n        cesar: z.array(z.string()),\n    }),\n    imLackingIdea: z.boolean().optional(),\n    itsForATest: z.boolean(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({\n    cesar: z.array(z.string()),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                cesar: z.array(z.string()),
              })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.reify(z.object({
        cesar: z.array(z.string()),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    cesar: z.array(z.string()),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        cesar: z.array(z.string()),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.reify(z.boolean().nullish())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1622:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.reify(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.reify(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1299:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.reify(z.optional(z.number()).array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1334:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.reify(z.string().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({\n    firstname: z.string().array(),\n    lastname: z.string(),\n    color: z.string(),\n    two: z.boolean().optional(),\n    three: z.number().array().optional(),\n    four: z.array(z.number()).optional(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              firstname: z.string().array(),
              lastname: z.string(),
              color: z.string(),
              two: z.boolean().optional(),
              three: z.number().array().optional(),
              four: z.array(z.number()).optional(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.reify(z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    firstname: z.string().array(),\n    lastname: z.string(),\n    color: z.string(),\n    two: z.boolean().optional(),\n    three: z.number().array().optional(),\n    four: z.array(z.number()).optional(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.reify(z.string().array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.reify(z.number().array().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({\n    divisionName: z.string(),\n    secrecyTags: z.array(z.string()).optional(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              divisionName: z.string(),
              secrecyTags: z.array(z.string()).optional(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.reify(z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    divisionName: z.string(),\n    secrecyTags: z.array(z.string()).optional(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.reify(z.array(z.string()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1757:13

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1760:14

  console.log
     >>>>>>> testCase.testMarkdown is :[---
    
    title: HiDeoo
    
    hereAnother: 
    
      reseau: 
    
        cesar: 
    
          - marc
    
          - aurèle
    
          - auguste
    
      imLackingIdea: true
    
      itsForATest: false
    
    tags: 
    
      - william
    
      - the
    
      - conquerer
    
    another: true
    
    exampleCategory:
    
      - - joe
    
        - alfred
    
        - alvin
    
      - - thirteen
    
        - hundred
    
        - books
    
      - - going
    
        - overseas
    
        - together
    
    example2Category: 
    
      - false
    
      - true
    
      - false
    
    example3Category: 
    
      - 7684464125145
    
      - 26454943684684
    
      - 1516546884648
    
    example4Category: 
    
      - 7684464125145
    
      - 26454943684684
    
      - 1516546884648
    
    image: "./images/paysages/puydedome.png"
    
    somethingElseNested:
    
      firstname: 
    
        - Jean-Baptiste
    
        - Marie
    
        - Éric
    
      lastname: Lasselle
    
      color: yellow
    
      two: false
    
      three: 
    
        - 56
    
        - 789
    
        - 159
    
      four: 
    
        - 15
    
        - 46
    
        - 739
    
      example1Categories: 
    
        - design
    
        - terraform
    
        - plugin
    
      example2Categories: 
    
        first:
    
          - joe
    
          - alfred
    
          - alvin
    
        second:
    
          - thirteen
    
          - hundred
    
          - books
    
        third:
    
          - going
    
          - overseas
    
          - together
    
    department: 
    
      divisionName: CCOE
    
      secrecyTags: 
        - LEVEL3
     
        - NOCOPY
    
    ---
    
    # Hello Pesto ZodSchemaReifier!
    ]

      at tests/reify/ZodSchemaReifier.test.ts:1763:14

  console.log
     >>>>>>> testCase.expectedFrontmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1766:14

  console.log
     >>>>>>> zod-matter extracted fronmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1774:16

  console.log
     >>>>>>> expected frontmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1777:16

  console.log
     >>>>>>> TEST CASE [Test #5: markdown frontmatter extraction zodSchema5] - testCase.zodSchemaAsText=[z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at tests/reify/ZodSchemaReifier.test.ts:1746:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z
        .object({
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z\n    .object",
        "{\n    title: z.string(),\n    hereAnother: z.object({\n        reseau: z.object({\n            cesar: z.array(z.string()),\n        }),\n        imLackingIdea: z.boolean().optional(),\n        itsForATest: z.boolean(),\n    }),\n    tags: z.array(z.string()),\n    another: z.boolean().nullish(),\n    exampleCategory: z.array(z.array(z.string().nullable())).optional(),\n    example2Category: z.nullable(z.array(z.boolean())).optional(),\n    example3Category: z.optional(z.number()).array(),\n    example4Category: z.array(z.number()).optional(),\n    image: z.string().optional(),\n    somethingElseNested: z.object({\n        firstname: z.string().array(),\n        lastname: z.string(),\n        color: z.string(),\n        two: z.boolean().optional(),\n        three: z.number().array().optional(),\n        four: z.array(z.number()).optional(),\n    }),\n    department: z.object({\n        divisionName: z.string(),\n        secrecyTags: z.array(z.string()).optional(),\n    }),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        title: z.string(),
        hereAnother: z.object({
            reseau: z.object({
                cesar: z.array(z.string()),
            }),
            imLackingIdea: z.boolean().optional(),
            itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
            firstname: z.string().array(),
            lastname: z.string(),
            color: z.string(),
            two: z.boolean().optional(),
            three: z.number().array().optional(),
            four: z.array(z.number()).optional(),
        }),
        department: z.object({
            divisionName: z.string(),
            secrecyTags: z.array(z.string()).optional(),
        }),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({\n    reseau: z.object({\n        cesar: z.array(z.string()),\n    }),\n    imLackingIdea: z.boolean().optional(),\n    itsForATest: z.boolean(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              reseau: z.object({
                cesar: z.array(z.string()),
              }),
              imLackingIdea: z.boolean().optional(),
              itsForATest: z.boolean(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.reify(z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    reseau: z.object({\n        cesar: z.array(z.string()),\n    }),\n    imLackingIdea: z.boolean().optional(),\n    itsForATest: z.boolean(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        reseau: z.object({
            cesar: z.array(z.string()),
        }),
        imLackingIdea: z.boolean().optional(),
        itsForATest: z.boolean(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({\n    cesar: z.array(z.string()),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
                cesar: z.array(z.string()),
              })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.reify(z.object({
        cesar: z.array(z.string()),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        cesar: z.array(z.string()),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    cesar: z.array(z.string()),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        cesar: z.array(z.string()),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.reify(z.boolean().nullish())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1622:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.reify(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1615:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.reify(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1299:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.reify(z.optional(z.number()).array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1334:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.reify(z.string().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({\n    firstname: z.string().array(),\n    lastname: z.string(),\n    color: z.string(),\n    two: z.boolean().optional(),\n    three: z.number().array().optional(),\n    four: z.array(z.number()).optional(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              firstname: z.string().array(),
              lastname: z.string(),
              color: z.string(),
              two: z.boolean().optional(),
              three: z.number().array().optional(),
              four: z.array(z.number()).optional(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.reify(z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    firstname: z.string().array(),\n    lastname: z.string(),\n    color: z.string(),\n    two: z.boolean().optional(),\n    three: z.number().array().optional(),\n    four: z.array(z.number()).optional(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        firstname: z.string().array(),
        lastname: z.string(),
        color: z.string(),
        two: z.boolean().optional(),
        three: z.number().array().optional(),
        four: z.array(z.number()).optional(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.reify(z.string().array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1517:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.reify(z.number().array().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1643:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1524:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({\n    divisionName: z.string(),\n    secrecyTags: z.array(z.string()).optional(),\n})"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({
              divisionName: z.string(),
              secrecyTags: z.array(z.string()).optional(),
            })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.reify(z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{\n    divisionName: z.string(),\n    secrecyTags: z.array(z.string()).optional(),\n}"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{
        divisionName: z.string(),
        secrecyTags: z.array(z.string()).optional(),
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.reify(z.array(z.string()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1650:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1757:13

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1760:14

  console.log
     >>>>>>> testCase.testMarkdown is :[---
    
    title: HiDeoo
    
    hereAnother:
    
      reseau:
    
        cesar:
    
          - marc
    
          - aurèle
    
          - auguste
    
      imLackingIdea: true
    
      itsForATest: false
    
    tags: 
    
      - william
    
      - the
    
      - conquerer
    
    another: true
    
    exampleCategory:
    
      - - joe
    
        - alfred
    
        - alvin
    
      - - thirteen
    
        - hundred
    
        - books
    
      - - going
    
        - overseas
    
        - together
    
    example2Category: 
    
      - false
    
      - true
    
      - false
    
    example3Category: 
    
      - 7684464125145
    
      - 26454943684684
    
      - 1516546884648
    
    example4Category: 
    
      - 7684464125145
    
      - 26454943684684
    
      - 1516546884648
    
    image: "./images/paysages/puydedome.png"
    
    somethingElseNested:
    
      firstname: 
    
        - Jean-Baptiste
    
        - Marie
    
        - Éric
    
      lastname: Lasselle
    
      color: yellow
    
      two: false
    
      three: 
    
        - 56
    
        - 789
    
        - 159
    
      four: 
    
        - 15
    
        - 46
    
        - 739
    
      example1Categories: 
    
        - design
    
        - terraform
    
        - plugin
    
      example2Categories: 
    
        first:
    
          - joe
    
          - alfred
    
          - alvin
    
        second:
    
          - thirteen
    
          - hundred
    
          - books
    
        third:
    
          - going
    
          - overseas
    
          - together
    
    department: 
    
      divisionName: CCOE
    
      secrecyTags: 
        - LEVEL3
     
        - NOCOPY
    
    ---
    
    # Hello Pesto ZodSchemaReifier!
    ]

      at tests/reify/ZodSchemaReifier.test.ts:1763:14

  console.log
     >>>>>>> testCase.expectedFrontmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1766:14

  console.log
     >>>>>>> zod-matter extracted fronmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1774:16

  console.log
     >>>>>>> expected frontmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1777:16

  console.log
     >>>>>>> TEST CASE [Test #6: markdown frontmatter extraction zodSchema6] - testCase.zodSchemaAsText=[z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at tests/reify/ZodSchemaReifier.test.ts:1788:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:217:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at src/reify/ZodSchemaReifier.ts:285:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:254:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[\n    z.object({ first: z.array(z.string()) }),\n    z.object({ second: z.array(z.string()) }),\n    z.object({ third: z.array(z.string()) }),\n]"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[tuple]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ArrayLiteralExpression] - processedNode is [[
        z.object({ first: z.array(z.string()) }),
        z.object({ second: z.array(z.string()) }),
        z.object({ third: z.array(z.string()) }),
    ]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ first: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ second: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1034:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1053:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1062:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ third: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1110:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1129:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1138:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1149:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1152:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:1156:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:377:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:385:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:395:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:327:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:337:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:340:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:359:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:409:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:417:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:427:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1510:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1327:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1313:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:1074:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:1320:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1799:13

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1802:13

  console.log
     >>>>>>> testCase.testMarkdown is :[undefined]

      at tests/reify/ZodSchemaReifier.test.ts:1805:13

  console.log
     >>>>>>> testCase.expectedFrontmatter is :[[
      {
        "first": [
          "I am in the [first]",
          "I am an example of a tuple as defined by zod"
        ]
      },
      {
        "second": [
          "I am in the [second]",
          "I am an example of a tuple as defined by zod"
        ]
      },
      {
        "third": [
          "I am in the [third]",
          "I am an example of a tuple as defined by zod"
        ]
      }
    ]]

      at tests/reify/ZodSchemaReifier.test.ts:1808:14

FAIL tests/reify/ZodSchemaReifier.test.ts (49.49 s)
  Tests of the {@ZodSchemaReifier} reify() method against the zod parse method
    Test the reify() returns a zod schema which successfully parses the test TypeScript Object
      √ [{"expect": true, "name": "Test #1: zodSchema1", "testTsObjectToValidate": undefined, "zodSchema": [ZodOptional], "zodSchemaAsText": "z
  .object({
    voila: z.string(),
  })
  .optional()"}] successfully pass the zod parse test (1992 ms)
      √ [{"expect": false, "name": "Test #1bis: zodSchema1", "testTsObjectToValidate": null, "zodSchema": [ZodOptional], "zodSchemaAsText": "z
  .object({
    voila: z.string(),
  })
  .optional()"}] successfully pass the zod parse test (1383 ms)
      √ [{"expect": true, "name": "Test #2: zodSchema2", "testTsObjectToValidate": [Array], "zodSchema": [ZodOptional], "zodSchemaAsText": "z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()"}] successfully pass the zod parse test (1352 ms)
      √ [{"expect": true, "name": "Test #3: zodSchema3", "testTsObjectToValidate": [Array], "zodSchema": [ZodNullable], "zodSchemaAsText": "z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()
  .nullable()"}] successfully pass the zod parse test (1244 ms)
      √ [{"expect": true, "name": "Test #4: zodSchema4", "testTsObjectToValidate": [Object], "zodSchema": [ZodOptional], "zodSchemaAsText": "z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })
  .optional()"}] successfully pass the zod parse test (2042 ms)
      √ [{"expect": true, "name": "Test #5: zodSchema5", "testTsObjectToValidate": [Object], "zodSchema": [ZodObject], "zodSchemaAsText": "z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })"}] successfully pass the zod parse test (2324 ms)
      √ [{"expect": true, "name": "Test #6: zodSchema6", "testTsObjectToValidate": [Array], "zodSchema": [ZodTuple], "zodSchemaAsText": "z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ])"}] successfully pass the zod parse test (1371 ms)
      √ [{"expect": true, "name": "Test #7: zodSchema7", "testTsObjectToValidate": [Array], "zodSchema": [ZodOptional], "zodSchemaAsText": "z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ]).nullable().optional()"}] successfully pass the zod parse test (1360 ms)
      √ [{"expect": true, "name": "Test #8: zodSchema8", "testTsObjectToValidate": false, "zodSchema": [ZodOptional], "zodSchemaAsText": "z.boolean().nullable().optional()"}] successfully pass the zod parse test (1070 ms)
      √ [{"expect": true, "name": "Test #9: zodSchema9", "testTsObjectToValidate": [Array], "zodSchema": [ZodOptional], "zodSchemaAsText": "z.array(z.boolean().nullish()).nullable().optional()"}] successfully pass the zod parse test (1341 ms)
      √ [{"expect": true, "name": "Test #10: zodSchema10", "testTsObjectToValidate": [Object], "zodSchema": [ZodNullable], "zodSchemaAsText": "z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()"}] successfully pass the zod parse test (1600 ms)
      √ [{"expect": true, "name": "Test #10bis: zodSchema10", "testTsObjectToValidate": null, "zodSchema": [ZodNullable], "zodSchemaAsText": "z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()"}] successfully pass the zod parse test (1422 ms)
      √ [{"expect": true, "name": "Test #10ter: zodSchema10", "testTsObjectToValidate": undefined, "zodSchema": [ZodNullable], "zodSchemaAsText": "z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()"}] successfully pass the zod parse test (1390 ms)
      √ [{"expect": true, "name": "Test #11: zodSchema11, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00Z", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime()"}] successfully pass the zod parse test (1012 ms)
      √ [{"expect": true, "name": "Test #11bis: zodSchema11, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00.123Z", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime()"}] successfully pass the zod parse test (1140 ms)
      √ [{"expect": true, "name": "Test #11ter: zodSchema11, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00.123456Z", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime()"}] successfully pass the zod parse test (1039 ms)
      √ [{"expect": false, "name": "Test #11quarte: zodSchema11, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00+02:00", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime()"}] successfully pass the zod parse test (1072 ms)
      √ [{"expect": true, "name": "Test #12: zodSchema12, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00+02:00", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime({ offset: true });"}] successfully pass the zod parse test (1284 ms)
      √ [{"expect": true, "name": "Test #12bis: zodSchema12, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00.123+02:00", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime({ offset: true });"}] successfully pass the zod parse test (1046 ms)
      √ [{"expect": true, "name": "Test #12ter: zodSchema12, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00.123+0200", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime({ offset: true });"}] successfully pass the zod parse test (1023 ms)
      √ [{"expect": true, "name": "Test #12quarte: zodSchema12, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00.123+02", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime({ offset: true });"}] successfully pass the zod parse test (1002 ms)
      √ [{"expect": true, "name": "Test #13: zodSchema13, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00.123Z", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime({ precision: 3 });"}] successfully pass the zod parse test (1039 ms)
      √ [{"expect": false, "name": "Test #13bis: zodSchema13, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00Z", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime({ precision: 3 });"}] successfully pass the zod parse test (1029 ms)
      √ [{"expect": false, "name": "Test #13ter: zodSchema13, https://zod.dev/?id=datetimes", "testTsObjectToValidate": "2020-01-01T00:00:00.123456Z", "zodSchema": [ZodString], "zodSchemaAsText": "z.string().datetime({ precision: 3 });"}] successfully pass the zod parse test (1024 ms)
      √ [{"expect": true, "name": "Test #14: zodSchema14, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the \"not\" operator).", "testTsObjectToValidate": [Object], "zodSchema": [ZodObject], "zodSchemaAsText": "z.object({ 
    something: z.boolean(),
  });"}] successfully pass the zod parse test (1218 ms)
      √ [{"expect": true, "name": "Test #14bis: testCase14bis, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using both an unary, and a binary operator (the \"not\" operator, and the \"or\" operator).", "testTsObjectToValidate": [Object], "zodSchema": [ZodObject], "zodSchemaAsText": "z.object({ 
    something: z.boolean(),
  });"}] successfully pass the zod parse test (1370 ms)
      × [{"expect": true, "name": "Test #15: zodSchema15, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the \"not\" operator).", "testTsObjectToValidate": 1901-01-01T00:00:00.000Z, "zodSchema": [ZodDate], "zodSchemaAsText": "z.date().min(new Date(\"1900-01-01\"), { message: \"Too old\" });"}] successfully pass the zod parse test (993 ms)
      × [{"expect": true, "name": "Test #16: zodSchema16, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the \"not\" operator).", "testTsObjectToValidate": 2024-01-01T00:00:00.000Z, "zodSchema": [ZodDate], "zodSchemaAsText": "z.date().max(new Date(), { message: \"Too young!\" });"}] successfully pass the zod parse test (995 ms)
      √ [{"expect": true, "name": "Test #17: zodSchema17, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the \"not\" operator).", "testTsObjectToValidate": 2024-01-01T00:00:00.000Z, "zodSchema": [ZodDate], "zodSchemaAsText": "z.coerce.date();"}] successfully pass the zod parse test (981 ms)
  Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method
    Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown
      √ [{"expectedFrontmatter": [Array], "name": "Test #3: markdown frontmatter extraction zodSchema3", "testMarkdown": "---

- voila: oh que oui
- voila: ça marche vraiment!
---

# Hello Pesto ZodSchemaReifier!
", "zodMatterShouldThrow": false, "zodSchema": [ZodNullable], "zodSchemaAsText": "z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()
  .nullable()"}] successfully pass the zod parse test [%p] (1234 ms)
      √ [{"expectedFrontmatter": [Object], "name": "Test #4: markdown frontmatter extraction zodSchema4", "testMarkdown": "---

title: HiDeoo

hereAnother: 

  reseau: 

    cesar: 

      - marc

      - aurèle

      - auguste

  imLackingIdea: true

  itsForATest: false

tags: 

  - william

  - the

  - conquerer

another: true

exampleCategory:

  - - joe

    - alfred

    - alvin

  - - thirteen

    - hundred

    - books

  - - going

    - overseas

    - together

example2Category: 

  - false

  - true

  - false

example3Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

example4Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

image: \"./images/paysages/puydedome.png\"

somethingElseNested:

  firstname: 

    - Jean-Baptiste

    - Marie

    - Éric

  lastname: Lasselle

  color: yellow

  two: false

  three: 

    - 56

    - 789

    - 159

  four: 

    - 15

    - 46

    - 739

  example1Categories: 

    - design

    - terraform

    - plugin

  example2Categories: 

    first:

      - joe

      - alfred

      - alvin

    second:

      - thirteen

      - hundred

      - books

    third:

      - going

      - overseas

      - together

department: 

  divisionName: CCOE

  secrecyTags: 
    - LEVEL3
 
    - NOCOPY

---

# Hello Pesto ZodSchemaReifier!
", "zodMatterShouldThrow": false, "zodSchema": [ZodOptional], "zodSchemaAsText": "z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })
  .optional()"}] successfully pass the zod parse test [%p] (2161 ms)
      √ [{"expectedFrontmatter": [Object], "name": "Test #5: markdown frontmatter extraction zodSchema5", "testMarkdown": "---

title: HiDeoo

hereAnother:

  reseau:

    cesar:

      - marc

      - aurèle

      - auguste

  imLackingIdea: true

  itsForATest: false

tags: 

  - william

  - the

  - conquerer

another: true

exampleCategory:

  - - joe

    - alfred

    - alvin

  - - thirteen

    - hundred

    - books

  - - going

    - overseas

    - together

example2Category: 

  - false

  - true

  - false

example3Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

example4Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

image: \"./images/paysages/puydedome.png\"

somethingElseNested:

  firstname: 

    - Jean-Baptiste

    - Marie

    - Éric

  lastname: Lasselle

  color: yellow

  two: false

  three: 

    - 56

    - 789

    - 159

  four: 

    - 15

    - 46

    - 739

  example1Categories: 

    - design

    - terraform

    - plugin

  example2Categories: 

    first:

      - joe

      - alfred

      - alvin

    second:

      - thirteen

      - hundred

      - books

    third:

      - going

      - overseas

      - together

department: 

  divisionName: CCOE

  secrecyTags: 
    - LEVEL3
 
    - NOCOPY

---

# Hello Pesto ZodSchemaReifier!
", "zodMatterShouldThrow": false, "zodSchema": [ZodObject], "zodSchemaAsText": "z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })"}] successfully pass the zod parse test [%p] (2075 ms)
      √ [{"expectedFrontmatter": [Array], "name": "Test #6: markdown frontmatter extraction zodSchema6", "testMarkdown": undefined, "zodMatterShouldThrow": true, "zodSchema": [ZodTuple], "zodSchemaAsText": "z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ])"}] should throw an error because zod matter parse does not accept zod tuples as input schema (1516 ms)

  ● Tests of the {@ZodSchemaReifier} reify() method against the zod parse method › Test the reify() returns a zod schema which successfully parses the test TypeScript Object › [{"expect": true, "name": "Test #15: zodSchema15, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the \"not\" operator).", "testTsObjectToValidate": 1901-01-01T00:00:00.000Z, "zodSchema": [ZodDate], "zodSchemaAsText": "z.date().min(new Date(\"1900-01-01\"), { message: \"Too old\" });"}] successfully pass the zod parse test

    [@ZodSchemaReifier].[reifyZodFunctionCallWithTwoArgs(): any] - ERROR, could not determine the zod function which matches [calledFunctionName=min]

    [0m [90m 1013 |[39m
     [90m 1014 |[39m       [36mdefault[39m[33m:[39m {
    [31m[1m>[22m[39m[90m 1015 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m      |[39m               [31m[1m^[22m[39m
     [90m 1016 |[39m           [32m`[@ZodSchemaReifier].[reifyZodFunctionCallWithTwoArgs(): any] - ERROR, could not determine the zod function which matches [calledFunctionName=${calledFunctionName}]`[39m
     [90m 1017 |[39m         )[33m;[39m
     [90m 1018 |[39m         [36mbreak[39m[33m;[39m[0m

      at ZodSchemaReifier.reifyZodFunctionCallWithTwoArgs (src/reify/ZodSchemaReifier.ts:1015:15)
      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:470:21)
      at tests/reify/ZodSchemaReifier.test.ts:1702:25

  ● Tests of the {@ZodSchemaReifier} reify() method against the zod parse method › Test the reify() returns a zod schema which successfully parses the test TypeScript Object › [{"expect": true, "name": "Test #16: zodSchema16, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the \"not\" operator).", "testTsObjectToValidate": 2024-01-01T00:00:00.000Z, "zodSchema": [ZodDate], "zodSchemaAsText": "z.date().max(new Date(), { message: \"Too young!\" });"}] successfully pass the zod parse test

    [@ZodSchemaReifier].[reifyZodFunctionCallWithTwoArgs(): any] - ERROR, could not determine the zod function which matches [calledFunctionName=max]

    [0m [90m 1013 |[39m
     [90m 1014 |[39m       [36mdefault[39m[33m:[39m {
    [31m[1m>[22m[39m[90m 1015 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m      |[39m               [31m[1m^[22m[39m
     [90m 1016 |[39m           [32m`[@ZodSchemaReifier].[reifyZodFunctionCallWithTwoArgs(): any] - ERROR, could not determine the zod function which matches [calledFunctionName=${calledFunctionName}]`[39m
     [90m 1017 |[39m         )[33m;[39m
     [90m 1018 |[39m         [36mbreak[39m[33m;[39m[0m

      at ZodSchemaReifier.reifyZodFunctionCallWithTwoArgs (src/reify/ZodSchemaReifier.ts:1015:15)
      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:470:21)
      at tests/reify/ZodSchemaReifier.test.ts:1702:25

Test Suites: 1 failed, 1 passed, 2 total
Tests:       2 failed, 32 passed, 34 total
Snapshots:   0 total
Time:        49.972 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.
